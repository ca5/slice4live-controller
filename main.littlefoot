/*
<metadata description="slic4live controller" details="slicd4live controller" target="Lightpad" tags="MIDI;Drum">
    <groups>
      <group name="colours" displayName="Colours" />
    </groups>

    <variables>
      <variable name="channel" displayName="MIDI Channel" type="int" min="1" max="16" value="1" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
      <!--
      <variable name="buttonColour1"  displayName="Button 1 Colour" group="colours" type="colour" value="0xffe557da" />
      <variable name="buttonColour2"  displayName="Button 2 Colour" group="colours" type="colour" value="0xfff9a366" />
      <variable name="buttonColour3"  displayName="Button 3 Colour" group="colours" type="colour" value="0xff4dbdf8" />
      <variable name="buttonColour4"  displayName="Button 4 Colour" group="colours" type="colour" value="0xff4dbdf8" />
      -->
    </variables>
</metadata>
*/

int buttonWidth, buttonSpacing;
int gridSize, maxButtonIndex;
int buttonPlayedIndex, buttonTouchedIndex, buttonSequenceIndex;
int xypadTouchedIndex;
int xypadX;
int xypadY;
float lastButtonVz;

int debug1;
int debug2;

int mididebug1, mididebug2, mididebug3;

//==============================================================================
int getButtonOnColour (int buttonIndex)
{
    return 0xff00ff00 |
          0x000000f0 * buttonIndex |
          0x00020000 * (buttonIndex + 1);
}

int getButtonOffColour (int buttonIndex)
{
    return 0x0f00ff00 |
          0x000000f0 * buttonIndex |
          0x00020000 * (buttonIndex + 1);
}

int getSequenceColour (int buttonIndex)
{
    return 0xffffffff;
}

//==============================================================================
int getTouchedButton (float x, float y)
{
	int xx = int (x * (0.95 / 2.0) * float (gridSize));
  int yy = (int (y * (0.95 / 2.0) * float (gridSize)));

  if (yy == 0) {
    return xx;
  }
  else if (yy < gridSize - 1) {
    if (xx == 0) {
      return 16 - yy;
    }
    else if (xx == gridSize - 1){
      return yy + 4;
    }
  }
  else {
    return 12 - xx;
  }

  return -1
}

int getTouchedXYpad (float x, float y)
{
	int xx = int (x * (0.95 / 2.0) * float (gridSize)) - 1;
  int yy = (int (y * (0.95 / 2.0) * float (gridSize))) - 1;

  if (xx >= 0 && yy >= 0 &&
      xx < gridSize - 1 && yy < gridSize - 1) {
        //return xx - 1 + yy * (gridSize - 2) 
        return 1;
      }

  return -1
}

//==============================================================================
void drawButton (int x, int y, int colour)
{
  int w = buttonWidth - buttonSpacing;
  blendGradientRect(colour, //fixme
                    colour & 0xff202020,
                    colour & 0xf0101010,
                    colour & 0xff202020,
                    x * buttonWidth, y * buttonWidth, w, w);
}

void drawSequence (int x, int y, int colour)
{
  int w = buttonWidth - buttonSpacing;
  blendGradientRect(0x00000000, //fixme
                    0x00000000,
                    colour,
                    0x00000000,
                    x * buttonWidth, y * buttonWidth, w, w);
}

int getButtonX (int buttonIndex)
{
  if (buttonIndex < (gridSize -1)) {
    return buttonIndex;
  }
  else if (buttonIndex < (gridSize - 1) * 2) {
    return gridSize - 1;
  }
  else if (buttonIndex < (gridSize - 1) * 3) {
    return 12 - buttonIndex;
  }
  else {
    return 0;
  }
}

int getButtonY (int buttonIndex)
{
  if (buttonIndex < (gridSize -1)) {
    return 0;
  }
  else if (buttonIndex < (gridSize - 1) * 2) {
    return buttonIndex - 4;
  }
  else if (buttonIndex < (gridSize - 1) * 3) {
    return gridSize - 1;
  }
  else if (buttonIndex < maxButtonIndex) {
    return 16 - buttonIndex;
  }
  else {
    return 0;
  }
}

void drawButtons()
{
  for(int buttonIndex = 0; buttonIndex < maxButtonIndex; ++buttonIndex)
  {
    if (buttonIndex == buttonPlayedIndex) {
      drawButton (getButtonX(buttonIndex), getButtonY(buttonIndex), getButtonOnColour(buttonIndex));
    } else {
      drawButton (getButtonX(buttonIndex), getButtonY(buttonIndex), getButtonOffColour(buttonIndex));
    }
    if (buttonIndex == buttonSequenceIndex) {
      drawSequence (getButtonX(buttonIndex), getButtonY(buttonIndex), getSequenceColour(buttonIndex));
    }
  }
}

void initialise()
{
  gridSize = 5;
  maxButtonIndex = gridSize * 4 - 4;
  buttonPlayedIndex = 0;
  buttonTouchedIndex = -1;
  lastButtonVz = 0.0;
  buttonSequenceIndex = 0;
  xypadTouchedIndex = -1;

	buttonWidth = 15 / gridSize;
	buttonSpacing = gridSize > 1 ? (15 - gridSize * buttonWidth) / (gridSize - 1) : 0;
	buttonWidth += buttonSpacing;

	for (int i = 0; i < 32; ++i)
        setLocalConfigActiveState (i, false, false);
}

//==============================================================================
void repaint()
{
	clearDisplay();

	if (isConnectedToHost())
        drawButtons();
        //debug
        //drawNumber(xypadX, 0xffff0000, 0, 0);
        //drawNumber(xypadY, 0xff00ff00, 0, 5);
        //drawNumber(xypadTouchedIndex, 0xff0000ff, 0, 10);
}

//==============================================================================
void touchStart (int touchIndex, float x, float y, float z, float vz)
{
  int touchedButton = getTouchedButton(x, y);
  if (touchedButton > 0) {
    buttonPlayedIndex = touchedButton;
    buttonTouchedIndex = touchIndex;
    int note = buttonPlayedIndex;
    int velocity = clamp (0, 127, int (vz * 127.0));
    if (velocity == 0) ++velocity; 
    lastButtonVz = vz;
    sendNoteOn ((channel - 1), note, velocity);
  }

  int touchedXYpad = getTouchedXYpad(x, y);
  if (touchedXYpad > 0) {
    xypadTouchedIndex = touchIndex;
  }
}

void touchMove (int touchIndex, float x, float y, float z, float vz)
{
  if (touchIndex == buttonTouchedIndex) {
    int touchedButton = getTouchedButton(x, y);
    if (touchedButton > 0 && 
        buttonPlayedIndex != touchedButton){
      touchStart (touchIndex, x, y, z, lastButtonVz);
    }
  }
  if (touchIndex = xypadTouchedIndex){
    int touchedXYpad = getTouchedXYpad(x, y);
    if (touchedXYpad > 0){
      xypadX = max(
                  min(
                    int(map(x, 2.0 / float(gridSize), 2.0 - 2.0 / float(gridSize), 0.0, 127.0)),
                    127
                  ),
                  0
                );
      xypadY = max(
                  min(
                    int(map(y, 2.0 / float(gridSize), 2.0 - 2.0 / float(gridSize), 0.0, 127.0)),
                    127
                  ),
                  0
                );
    }
  }
}

void touchEnd (int touchIndex, float x, float y, float z, float vz)
{
  if (touchIndex == buttonTouchedIndex)
  {
    int note = buttonPlayedIndex;
    int velocity = clamp (0, 127, int (vz * 127.0));
    sendNoteOff ((channel - 1), note, velocity);
    buttonPlayedIndex = -1;
  }
  if (touchIndex = xypadTouchedIndex){
    xypadTouchedIndex = -1;
  }
}


//==============================================================================
void handleMIDI(int byte0, int byte1, int byte2) {
  mididebug1 = byte0;
  mididebug2 = byte1;
  mididebug3 = byte2;

  if (byte0 - 144 > 0 && byte0 - 144 < 17) {
    if (byte2 > 0){
      if (byte1 >= 0 && byte1 <= maxButtonIndex){
        buttonPlayedIndex = byte1;
      }
      else if (byte1 >= 32 && byte1 <= 32 + maxButtonIndex){
        buttonSequenceIndex = byte1 - 32;
      }
    }
  }
}