/*
<metadata description="slic4live controller" details="slicd4live controller" target="Lightpad" tags="MIDI;Drum">
    <groups>
      <group name="colours" displayName="Colours" />
    </groups>

    <variables>
      <variable name="channel" displayName="MIDI Channel" type="int" min="1" max="16" value="1" displayMode="stepper" tooltip="The MIDI channel that values are sent on" />
      <!--
      <variable name="padColour1"  displayName="Pad 1 Colour" group="colours" type="colour" value="0xffe557da" />
      <variable name="padColour2"  displayName="Pad 2 Colour" group="colours" type="colour" value="0xfff9a366" />
      <variable name="padColour3"  displayName="Pad 3 Colour" group="colours" type="colour" value="0xff4dbdf8" />
      <variable name="padColour4"  displayName="Pad 4 Colour" group="colours" type="colour" value="0xff4dbdf8" />
      -->
    </variables>
</metadata>
*/

int padWidth, padSpacing;
int gridSize, maxPadIndex;
int padPlayedIndex, padTouchedIndex, padSequenceIndex;
int functionTouchedIndex;
float lastPadVz;

int mididebug1, mididebug2, mididebug3;

//==============================================================================
int getPadOnColour (int padIndex)
{
    return 0xff00ff00 |
          0x000000f0 * padIndex |
          0x00020000 * (padIndex + 1);
}

int getPadOffColour (int padIndex)
{
    return 0x0f00ff00 |
          0x000000f0 * padIndex |
          0x00020000 * (padIndex + 1);
}

int getSequenceColour (int padIndex)
{
    return 0xffffffff;
}

//==============================================================================
int getTouchedPad (float x, float y)
{
	int xx = int (x * (0.95 / 2.0) * float (gridSize));
  int yy = (int (y * (0.95 / 2.0) * float (gridSize)));

  if (yy == 0) {
    return xx;
  }
  else if (yy < gridSize - 1) {
    if (xx == 0) {
      return 16 - yy;
    }
    else if (xx == gridSize - 1){
      return yy + 4;
    }
  }
  else {
    return 12 - xx;
  }

  return -1
}
/*
int getTouchedFunction (float x, float y)
{
	int xx = int (x * (0.95 / 2.0) * float (gridSize)) - 1;
  int yy = (int (y * (0.95 / 2.0) * float (gridSize))) - 1;

  if (xx > 0 && yy > 0 &&
      xx < gridSize - 1 && yy < gridSize - 1) {
        return xx - 1 + yy * (gridSize - 2) 
      }

  return -1
}
*/

//==============================================================================
void drawPad (int x, int y, int colour)
{
  int w = padWidth - padSpacing;
  blendGradientRect(colour, //fixme
                    colour & 0xff202020,
                    colour & 0xf0101010,
                    colour & 0xff202020,
                    x * padWidth, y * padWidth, w, w);
}

void drawSequence (int x, int y, int colour)
{
  int w = padWidth - padSpacing;
  blendGradientRect(0x00000000, //fixme
                    0x00000000,
                    colour,
                    0x00000000,
                    x * padWidth, y * padWidth, w, w);
}

int getPadX (int padIndex)
{
  if (padIndex < (gridSize -1)) {
    return padIndex;
  }
  else if (padIndex < (gridSize - 1) * 2) {
    return gridSize - 1;
  }
  else if (padIndex < (gridSize - 1) * 3) {
    return 12 - padIndex;
  }
  else {
    return 0;
  }
}

int getPadY (int padIndex)
{
  if (padIndex < (gridSize -1)) {
    return 0;
  }
  else if (padIndex < (gridSize - 1) * 2) {
    return padIndex - 4;
  }
  else if (padIndex < (gridSize - 1) * 3) {
    return gridSize - 1;
  }
  else if (padIndex < maxPadIndex) {
    return 16 - padIndex;
  }
  else {
    return 0;
  }
}

void drawPads()
{
  for(int padIndex = 0; padIndex < maxPadIndex; ++padIndex)
  {
    if (padIndex == padPlayedIndex) {
      drawPad (getPadX(padIndex), getPadY(padIndex), getPadOnColour(padIndex));
    } else {
      drawPad (getPadX(padIndex), getPadY(padIndex), getPadOffColour(padIndex));
    }
    if (padIndex == padSequenceIndex) {
      drawSequence (getPadX(padIndex), getPadY(padIndex), getSequenceColour(padIndex));
    }
  }
}

void initialise()
{
  gridSize = 5;
  maxPadIndex = gridSize * 4 - 4;
  padPlayedIndex = 0;
  padTouchedIndex = 0;
  lastPadVz = 0.0;
  padSequenceIndex = 0;
  functionTouchedIndex = 0;

	padWidth = 15 / gridSize;
	padSpacing = gridSize > 1 ? (15 - gridSize * padWidth) / (gridSize - 1) : 0;
	padWidth += padSpacing;

	for (int i = 0; i < 32; ++i)
        setLocalConfigActiveState (i, false, false);
}

//==============================================================================
void repaint()
{
	clearDisplay();

	if (isConnectedToHost())
        drawPads();
        //drawNumber(mididebug1, 0xffff0000, 0, 0);
        //drawNumber(mididebug2, 0xff00ff00, 0, 5);
        //drawNumber(mididebug3, 0xff0000ff, 0, 10);
}

//==============================================================================
void touchStart (int touchIndex, float x, float y, float z, float vz)
{
  int touchedPad = getTouchedPad(x, y);
  if (touchedPad > 0) {
    padPlayedIndex = touchedPad;
    padTouchedIndex = touchIndex;
    int note = padPlayedIndex;
    int velocity = clamp (0, 127, int (vz * 127.0));
    if (velocity == 0) ++velocity; 
    lastPadVz = vz;
    sendNoteOn ((channel - 1), note, velocity);
  }

  /*
  int touchedFunction = getTouchedFunction(x, y);
  if (touchedFunction > 0) {
    functionTouchedIndex = touchedIndex;
  }
  */
}

void touchMove (int touchIndex, float x, float y, float z, float vz)
{
  if (touchIndex == padTouchedIndex) {
    if (padPlayedIndex != getTouchedPad (x, y)){
      touchStart (touchIndex, x, y, z, lastPadVz);
    }
  }
}

void touchEnd (int touchIndex, float x, float y, float z, float vz)
{
    if (touchIndex == padTouchedIndex)
    {
        int note = padPlayedIndex;
        int velocity = clamp (0, 127, int (vz * 127.0));
        sendNoteOff ((channel - 1), note, velocity);
        padPlayedIndex = -1;
    }
}


//==============================================================================
void handleMIDI(int byte0, int byte1, int byte2) {
  mididebug1 = byte0;
  mididebug2 = byte1;
  mididebug3 = byte2;

  if (byte0 - 144 > 0 && byte0 - 144 < 17) {
    if (byte2 > 0){
      if (byte1 >= 0 && byte1 <= maxPadIndex){
        padPlayedIndex = byte1;
      }
      else if (byte1 >= 32 && byte1 <= 32 + maxPadIndex){
        padSequenceIndex = byte1 - 32;
      }
    }
  }
}